CREATE OR REPLACE PROCEDURE ${aether_5g_core_module_tgt_dataset_name}.aether_smf_performance_derived_tbl_sp(process_ts STRING, trans_ts STRING)
options(strict_mode=False)
BEGIN
  -- Insert entry into audit table
  MERGE
  `${target_project_id}.${audit_tgt_dataset_name}.${audit_target_tblname}` tgt
  USING
  (
    SELECT
      CONCAT("5g core smf hourly derived tbls process") as prc_name,
      safe_cast(trans_ts AS datetime) AS start_time,
      safe_cast(SPLIT(trans_ts,' ')[OFFSET(0)] AS date) src_prc_dt 
  ) src
  ON (src.prc_name=tgt.PROCESS_NAME AND src.START_TIME=tgt.START_TIME)
  WHEN NOT MATCHED THEN 
  INSERT (
    PROCESS_MODULE,
    SCHEDULER,
    PROCESS_NAME,
    SOURCE_NAME,
    TARGET_NAME,
    START_TIME,
    END_TIME,
    PROCESS_DT,
    NUM_RECORDS_AFFECTED,
    STATUS,
    RETURN_MESSAGE)
  VALUES
  (
    "aether",
    "airflow",
    prc_name,
    "${aether_5g_core_module_src_project_id}.${aether_5g_core_module_src_dataset_name}.${aether_5g_core_module_src_derived_smf_viewname}",
    "${aether_5g_core_module_tgt_project_id}.${aether_5g_core_module_tgt_dataset_name}.${aether_5g_core_module_tgt_derived_smf_tblname}",
    start_time,
    NULL,
    src_prc_dt,
    NULL,
    "Started",
    NULL
  );

  MERGE INTO `${aether_5g_core_module_tgt_project_id}.${aether_5g_core_module_tgt_dataset_name}.${aether_5g_core_module_tgt_derived_smf_tblname}` tgt
  USING (
    WITH fqdn_classification AS (
      SELECT
        trans_dt,
        event_time,
        fqdn,
        vendor,
        metric_name,
        value,
        fqdn_type,
        -- Extract the deployment number (last two characters of the fqdn)
        REGEXP_EXTRACT(fqdn, r'(\d{2})$') AS deployment_number, -- Extracts "01", "02", or other deployment numbers
        UPPER(SUBSTR(fqdn, 1, LENGTH(fqdn) - 3)) AS fqdn_base,  -- Base part of FQDN, removing deployment number
        JSON_EXTRACT_SCALAR(key_group, '$.group_by_key_name') AS group_key,
        JSON_EXTRACT_SCALAR(key_group, '$.group_by_key_value') AS group_value,
        datetime(process_ts) as schedule_time,
        current_timestamp as updated_timestamp
      FROM grafana_expression_calc
      WHERE timestamp(event_time) in (SELECT event_time FROM event_timestamps)
        AND timestamp(schedule_time) > (SELECT min(event_time) FROM event_timestamps)
        AND trans_dt IN (SELECT date(event_time) FROM event_timestamps)
    ),
    fqdn_with_primary_fqdn AS (
      SELECT
        f.trans_dt,
        f.event_time,
        f.fqdn,
        f.vendor,
        f.metric_name,
        f.value,
        f.fqdn_type,
        f.deployment_number,
        f.fqdn_base,
        f.group_key,
        f.group_value,
        f.schedule_time,
        f.updated_timestamp,
        CASE
          WHEN f.fqdn_type = 'primary' THEN f.fqdn  -- If it's a primary FQDN, just return it as is
          WHEN f.fqdn_type = 'secondary' THEN
            -- For secondary FQDN, fetch the corresponding primary FQDN from the site mapping table
            (SELECT primary_fqdn
             FROM `${aether_5g_core_module_tgt_project_id}.${aether_5g_core_module_site_config_dataset_name}.${aether_5g_core_module_aether_site_confg_tblname}`
             WHERE secondary_fqdn = f.fqdn)  -- Match secondary fqdn with primary in the site config
          ELSE NULL
        END AS primary_fqdn  -- Adding the logic for Primary FQDN
      FROM fqdn_classification f
    )
    SELECT
      src.trans_dt,
      src.event_time,
      DATETIME(TIMESTAMP(src.event_time), pm.timezone) AS local_event_time,
      src.fqdn,
      src.vendor,
      src.metric_name,
      src.value,
      src.group_key,
      src.group_value,
      src.fqdn_type,
      src.primary_fqdn,  -- Primary FQDN column updated here
      CASE
        WHEN src.fqdn_type = 'primary' AND pm.primary_clli IS NOT NULL THEN pm.primary_clli
        WHEN src.fqdn_type = 'secondary' AND pm.secondary_clli IS NOT NULL THEN pm.primary_clli
        ELSE NULL
      END AS primary_clli,
      CASE
        WHEN src.fqdn_type = 'primary' AND pm.primary_clli IS NOT NULL THEN pm.primary_clli
        WHEN src.fqdn_type = 'secondary' AND pm.secondary_clli IS NOT NULL THEN pm.secondary_clli
        ELSE NULL
      END AS device_clli,
      pm.site_name,
      pm.region,
      pm.latitude,
      pm.longitude,
      pm.area,
      pm.market,
      src.schedule_time,
      src.updated_timestamp
    FROM fqdn_with_primary_fqdn src
    LEFT JOIN (
      SELECT
        UPPER(site_clli) AS primary_clli,
        UPPER(pair) AS secondary_clli,
        site_name,
        region,
        latitude,
        longitude,
        area,
        market,
        timezone
      FROM `${aether_5g_core_module_tgt_project_id}.${aether_5g_core_module_site_config_dataset_name}.${aether_5g_core_module_aether_site_confg_tblname}`
    ) pm
    ON (src.primary_fqdn = pm.primary_clli OR src.primary_fqdn = pm.secondary_clli)
  ) src
  ON tgt.trans_dt = src.trans_dt
  AND tgt.event_time = src.event_time
  AND tgt.fqdn = src.fqdn
  AND tgt.metric_name = src.metric_name
  AND tgt.vendor = src.vendor
  AND tgt.group_key = src.group_key
  AND tgt.group_value = src.group_value
  AND tgt.trans_dt IS NOT NULL
  WHEN MATCHED THEN 
  UPDATE SET
    tgt.local_event_time = src.local_event_time,
    tgt.value = src.value,
    tgt.fqdn_type = src.fqdn_type,
    tgt.primary_fqdn = src.primary_fqdn,  -- Update Primary FQDN column here
    tgt.primary_clli = src.primary_clli,
    tgt.device_clli = src.device_clli,
    tgt.site_name = src.site_name,
    tgt.region = src.region,
    tgt.latitude = src.latitude,
    tgt.longitude = src.longitude,
    tgt.area = src.area,
    tgt.market = src.market,
    tgt.schedule_time = src.schedule_time,
    tgt.updated_timestamp = src.updated_timestamp
  WHEN NOT MATCHED THEN
  INSERT
  (trans_dt,
   event_time,
   local_event_time,
   fqdn,
   vendor,
   metric_name,
   value,
   group_key,
   group_value,
   fqdn_type,
   primary_fqdn,  -- Insert Primary FQDN here
   primary_clli,
   device_clli,
   site_name,
   region,
   latitude,
   longitude,
   area,
   market,
   schedule_time,
   updated_timestamp)
  VALUES
  (src.trans_dt,
   src.event_time,
   src.local_event_time,
   src.fqdn,
   src.vendor,
   src.metric_name,
   src.value,
   src.group_key,
   src.group_value,
   src.fqdn_type,
   src.primary_fqdn,  -- Insert Primary FQDN here
   src.primary_clli,
   src.device_clli,
   src.site_name,
   src.region,
   src.latitude,
   src.longitude,
   src.area,
   src.market,
   src.schedule_time,
   src.updated_timestamp);

  -- Update audit table with completed status
  UPDATE
  `${target_project_id}.${audit_tgt_dataset_name}.${audit_target_tblname}`
  SET
    END_TIME = CURRENT_DATETIME(),
    NUM_RECORDS_AFFECTED = @@ROW_COUNT,
    STATUS = "Completed",
    RETURN_MESSAGE = "Success"
  WHERE
    PROCESS_NAME = CONCAT("5g core smf hourly derived tbls process")
    AND start_time = safe_cast(trans_ts AS datetime);

  SELECT "Process Completed Successfully"; 

EXCEPTION
WHEN ERROR THEN
  -- Update audit table with error status
